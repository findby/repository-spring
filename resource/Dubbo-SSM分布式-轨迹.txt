抱怨的男的没本事；男的，要本事。

create procedure proc_name
drop procedure proc_name

数据库 SQL 语言层面的代码封装与重用。








https://www.bccn.net/  {编程中国}
泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。

{单点登录}
https://github.com/a466350665/smart/stargazers

服务，http://localhost:8080/smart-sso-server/swagger-ui.html

java 单点登录权限系统
	数据库模型

用户：ID(主键)、登录名、密码(加密)、最后登录IP、最后登录时间、登录总次数、创建时间、是否启用
用户角色：ID(主键)、用户ID(外键)、角色ID(外键)
角色：ID(主键)、名称、排序、描述、是否启用
角色权限：ID(主键)、角色ID()、权限ID()、应用ID()
应用：ID()、名称、排序、创建时间、是否启用、编码
权限：ID()、应用ID、父ID、图标、名称、权限URL、排序、是否菜单、是否启用

server 端口：8080
客户端 端口：8082

{DateUtils}
12-6 补充，时间戳-日期格式

dubbo 初识别---SOA(分布式架构)
	用spring管理，注册中心zookeeper
	pom.xml 引入dependency根据以上思路





















2019-10-30 {事情的自我肯定}：秦顶涛，对不起，今天记住我的耻辱。
	[预期]公司 做的项目有意义---我自己的[找工作]计划，也得严格自己执行
	团队积极向上，相处和睦

2019-11-02 计划tomcat、nginx面试题，demo；例如nginx配置目录-集群，怎么实现代理？


2019-11-12  quartz+工具

2019-11-13  奋斗的年纪、捧着饭碗		Kafka



redis的数据类型
	String
	hash：value存放的是结构化的对象，例如单点：以cookieId作为key
	list
	set:：堆放的是一堆不重复值的集合
	sorted set：比set多了一个权重参数score













Git push to upstream没有权限  



{redis---Nginx---mysql---tomcat}，工作才会出头，积累才能变强

ORACLE	使用SEQUENCE

CREATE SEQUENCE 序列
MINVALUE 1
MAXVALUE 99999999999
START WITH 1000
INCREMENT BY 1
NOCYCLE
CACHE 20
ORDER ;

select 序列.nextval from dual;---查询[序列]是否存在

git使用{}
git branch 创建-分支

jetty /tomcat

NGINX静态代理

mysql 主从复制(多个数据库5.7、5.5，数据一致)---读写分离(mysql-proxy)
2019-10-09
态度在改变了，这就是我觉得换工作的意义

Dubbox+SSM分布式框架搭建---遗留小问题

2019-10-10  计划

10-12中午<计划延迟了...>	电商
	文件系统---service层
	读一套最简单的增删改查
12下午-15 MYSQL(REDIS)、LINUX
	程序员的自我修养
	IOC容器
	//判断 location 是为相对路径还是绝对路径
	ResourcePatternUtils.isUrl(location)||ResourceUtils.toURI(location).isAbsolute()
	//aaa不为空
	StringUtils.hasLength("aaa")

	SQL  不能不使用where而使用and---我厌恶这里的环境了
[办法比困难多]


pom.xml		日志,测试。

Quartz API的关键接口是：


查看我,E:\dubbo-down下的学习状况。
	记录在数据库里。
	
	Scheduler：调度器   Trigger： 定义触发的条件
	JobDetail & Job： JobDetail 定义的是任务数据，而真正的执行逻辑是在Job中

	1.定义Scheduler
	2.定义Trigger
	3.定义JobDetail
	4.Trigger、JobDetail加入这个Scheduler调度
	5.启动Scheduler调度

2019-11-29  git

	spring 9个后置处理器。

redis 持久化机制
	单独创建fork()子进程，将[当前]父进程数据库的数据复制到子进程的内存中，
[子进程写入到临时文件里]持久化结束，临时文件替换快照文件，子进程退出，内存释放
	RDB 按照一定的时间周期策略把内存的数据以快照的形式保存到硬盘的二进制文件
	AOF 数据恢复；redis会将每一个收到的写命令，通过write函数追加到文件最后

	那边比较重视数据库，尤其是存储过程的东西  Procedure
	AnnotationConfigApplicationContext















有垃圾项目，就一直有垃圾项目(10.17)，值得思考的是，我的成长在那？

自己没主动学东西，公司也没有东西

dubbo + SSM{dubbo-2.5.3	zookeeper-3.4.7}
			tomcat架构+nginx+mysql分库分表？---工作流？
			---现在就是受气的状态，有比这个更差的情况嘛。---找到年后，去上班的吧，好好加油。
			---做事先做人，什么样的状态都有，自己看清现实；一直觉得没什么好可耻的事嘛，认清工作

mybatis 逆向工程	生成mapper\PO\xml(√)
Zookeeper	安装-使用


{潜心提升自己的价值，事情掌握在自己的手上}
IOC 加载Bean:资源定位、装载、注册
-->%ZOOKEEPER_HOME%/bin; %ZOOKEEPER_HOME%/conf;















[出去,能拿到一份满意的工作;好的项目---技术是自己磨练的]---{棘手,捉襟见肘}
【戒掉我的逃避心】

spring

Core、Context 和 Beans
Beans：包装的是Object
Context：发现每个bean之间的关系，为它们建立这种关系并且要维护好这种关系
Core：发现、建立和维护每个Bean之间的关系所需要的一系列的工具

怎么实现第一个spring例子,J2SE,J2EE

--->读取配置。

SQL优化：37 个 MySQL 数据库小技巧  MySQL数据库开发的 36 条军规
---EXPLAIN EXTENDED:优化策略
	1.列类型尽量定义成数值类型，且长度尽可能短
	2.建立单列索引
	3.根据需要建立多列联合索引
	     a.当单个列过滤之后还有很多数据，那么索引的效率将会比较低，即列的区分度较低
	     b.如果在多个列上建立索引，那么多个列的区分度就大多了，将会有显著的效率提高

	A.根据业务场景建立覆盖索引只查询业务需要的字段，如果这些字段被索引覆盖，将极大的提高查询效率
	B.多表连接的字段上需要建立索引，这样可以极大提高表连接的效率
	C.where条件字段上需要建立索引
	D.排序字段上需要建立索引
	E.分组字段上需要建立索引
	F.Where条件上不要使用运算函数，以免索引失效


里氏替换原则：什么时候应该使用继承，什么时候不应该使用继承
依赖倒置原则：目的是通过要面向接口的编程来降低类间的耦合性
单一职责原则、接口隔离原则：
单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要
约束接口，主要针对抽象和程序整体架构的构建
迪米特法则，谨慎使用序列化功能

7种设计原则：开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；里氏替换原则告诉
我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；单一职责原则告诉我们实现类
要职责单一；接口隔离原则告诉我们设计接口精简单一；迪米特法则告诉我们要降低耦合度；
合成复用原则告诉我们要优先使用组合或聚合关系复用，少用继承关系复用

建造者模式,将一个复杂对象分解成多个相对简单的部分,然后根据不同需要分别创建它们,
最后构建成该复杂对象
单例模式--->懒汉式单例（类加载时没有生成单例，只有当第一次调用getInstance方法时才去创
建这个单例）、饿汉式单例
原型模式--->
抽象工厂方法模式->工厂方法模式
抽象工厂模式，是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定
所要产品的具体类就能得到同族的不同等级的产品的模式结构。
建造者模式：指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示

结构型模式分：分类
	代理模式：中介
	适配器模式：复用已经有的接口
	装饰模式:例子 Java I/O标准库的设计 InputStream-FileInputStream
	外观模式:有必要为多个子系统提供一个统一的接口，从而降低系统的耦合度。
	(2019-10-21 设计模式、mysql问题)
	享元模式：运用共享技术来有効地支持大量细粒度对象的复用，享元模式是通
	过减少内存中对象的数量来节省内存空间的
	？？组合模式--部分-整体模式
行为型模式：分类
	模板方法模式：定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使
	得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤
	注：抽象类与具体子类之间的协作;它用到了虚函数的多态性技术以及“不用调用我，
	让我来调用你”的反向控制技术

	策略模式：---
	命令模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开
	[命令模式联合组合模式]---{组合命令模式}

	责任链模式：经典实例。---小学生请假。

	观察者模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通
	知给其他多个对象，从而影响其他对象的行为。











spring-webmvc 包括---core、context、beans	[命运掌握在自己的手里，努力]

	java继承{属性、方法、构造器}		浙江大学、国防科技大学
JVM管理的内存结构是怎样的？
	Java虚拟机运行时数据区域主要包含了PC寄存器（程序计数器）、Java虚拟机栈、本地方法
	栈、Java堆、方法区以及运行时常量池。
不同的虚拟机在实现运行时内存的时候有什么区别？
